#pragma kernel GenerateHizMap
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#pragma multi_compile_local __ _REVERSE_Z


TEXTURE2D_X_FLOAT(_InputDepthTex);
SAMPLER(samplerLinearClamp);

uniform float4 _SampleDepthScale;

groupshared float hiz_0[16][16];
groupshared float hiz_1[8][8];
groupshared float hiz_2[4][4];
groupshared float hiz_3[2][2];

RWTexture2D<float> HIZ_MAP_Mip0;
RWTexture2D<float> HIZ_MAP_Mip1;
RWTexture2D<float> HIZ_MAP_Mip2;
RWTexture2D<float> HIZ_MAP_Mip3;

float GetHizDepth2X2(float depth0, float depth1, float depth2, float depth3)
{
    #if _REVERSE_Z
    return min(min(depth0, depth1),min(depth2, depth3));
    #else
    return max(max(depth0, depth1), max(depth2, depth3));
    #endif
}

[numthreads(16, 16, 1)]
void GenerateHizMap(uint3 id : SV_DispatchThreadID, uint3 groupId : SV_GroupID, uint3 idInGroup : SV_GroupThreadID)
{
    const float2 uv = id.xy * _SampleDepthScale.xy;
    float depth = SAMPLE_TEXTURE2D_LOD(_InputDepthTex, samplerLinearClamp, uv, 0);
    uint2 pix = uint2(idInGroup.xy);
    hiz_0[pix.x][pix.y] = depth;
    GroupMemoryBarrierWithGroupSync();

    pix = idInGroup.xy >> 1;
    uint2 lastPix = pix * 2;
    uint2 pix0 = lastPix;
    uint2 pix1 = lastPix + uint2(0, 1);
    uint2 pix2 = lastPix + uint2(1, 0);
    uint2 pix3 = lastPix + uint2(1, 1);
    depth = GetHizDepth2X2(hiz_0[pix0.x][pix0.y], hiz_0[pix1.x][pix1.y], hiz_0[pix2.x][pix2.y], hiz_0[pix3.x][pix3.y]);
    hiz_1[pix.x][pix.y] = depth;
    HIZ_MAP_Mip0[id.xy >> 1] = depth;
    GroupMemoryBarrierWithGroupSync();

    pix = idInGroup.xy >> 2;
    lastPix = pix * 2;
    pix0 = lastPix;
    pix1 = lastPix + uint2(0, 1);
    pix2 = lastPix + uint2(1, 0);
    pix3 = lastPix + uint2(1, 1);
    depth = GetHizDepth2X2(hiz_1[pix0.x][pix0.y], hiz_1[pix1.x][pix1.y], hiz_1[pix2.x][pix2.y], hiz_1[pix3.x][pix3.y]);
    hiz_2[pix.x][pix.y] = depth;
    HIZ_MAP_Mip1[id.xy >> 2] = depth;
    GroupMemoryBarrierWithGroupSync();

    pix = idInGroup.xy >> 3;
    lastPix = pix * 2;
    pix0 = lastPix;
    pix1 = lastPix + uint2(0, 1);
    pix2 = lastPix + uint2(1, 0);
    pix3 = lastPix + uint2(1, 1);
    depth = GetHizDepth2X2(hiz_2[pix0.x][pix0.y], hiz_2[pix1.x][pix1.y], hiz_2[pix2.x][pix2.y], hiz_2[pix3.x][pix3.y]);
    hiz_3[pix.x][pix.y] = depth;
    HIZ_MAP_Mip2[id.xy >> 3] = depth;

    GroupMemoryBarrierWithGroupSync();
    pix = idInGroup.xy >> 4;
    lastPix = pix * 2;
    pix0 = lastPix;
    pix1 = lastPix + uint2(0, 1);
    pix2 = lastPix + uint2(1, 0);
    pix3 = lastPix + uint2(1, 1);
    depth = GetHizDepth2X2(hiz_3[pix0.x][pix0.y], hiz_3[pix1.x][pix1.y], hiz_3[pix2.x][pix2.y], hiz_3[pix3.x][pix3.y]);
    HIZ_MAP_Mip3[id.xy >> 4] = depth;
}
